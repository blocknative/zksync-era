name: Build Server V2
on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: "Tag for docker image"
        required: false
  push:
    tags:
      - '*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/server-v2
  CACHE_KEY: ${{ github.repository }}-server-v2-${{ github.sha }}
  CONTRACTS_CACHE_KEY: ${{ github.repository }}-contracts-${{ github.sha }}

jobs:
  prepare-contracts:
    name: Prepare contracts
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - name: Cache contracts
        uses: actions/cache@v4
        with:
          path: |
            ./contracts
            ./hardhat-nodejs/compilers-v2
          key: ${{ env.CONTRACTS_CACHE_KEY }}
          restore-keys: |
            ${{ github.repository }}-contracts-

      - name: Prepare ENV
        shell: bash
        run: |
          echo ZKSYNC_HOME=$(pwd) >> $GITHUB_ENV
          echo CI=1 >> $GITHUB_ENV
          echo $(pwd)/bin >> $GITHUB_PATH
          echo $HOME/.local/bin >> $GITHUB_PATH
          echo CI=1 >> .env
          echo IN_DOCKER=1 >> .env

      - name: Download contracts
        if: steps.cache-contracts.outputs.cache-hit != 'true'
        shell: bash
        run: |
          commit_sha=$(git submodule status contracts | awk '{print $1}' | tr -d '-')
          page=1
          filtered_tag=""
          while [ true ]; do
            echo "Page: $page"
            tags=$(run_retried curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/vnd.github+json" \
              "https://api.github.com/repos/matter-labs/era-contracts/tags?per_page=100&page=${page}" | jq .)
            if [ $(jq length <<<"$tags") -eq 0 ]; then
              echo "No tag found on all pages."
              echo "BUILD_CONTRACTS=true" >> "$GITHUB_ENV"
              exit 0
            fi
            filtered_tag=$(jq -r --arg commit_sha "$commit_sha" 'map(select(.commit.sha == $commit_sha)) | .[].name' <<<"$tags")
            if [[ ! -z "$filtered_tag" ]]; then
              echo "BUILD_CONTRACTS=false" >> "$GITHUB_ENV"
              break
            fi
            ((page++))
          done
          echo "Contracts tag is: ${filtered_tag}"
          mkdir -p ./contracts
          run_retried curl -s -LO https://github.com/matter-labs/era-contracts/releases/download/${filtered_tag}/l1-contracts.tar.gz
          run_retried curl -s -LO https://github.com/matter-labs/era-contracts/releases/download/${filtered_tag}/l2-contracts.tar.gz
          run_retried curl -s -LO https://github.com/matter-labs/era-contracts/releases/download/${filtered_tag}/system-contracts.tar.gz
          tar -C ./contracts -zxf l1-contracts.tar.gz
          tar -C ./contracts -zxf l2-contracts.tar.gz
          tar -C ./contracts -zxf system-contracts.tar.gz

      - name: Install Apt dependencies
        if: steps.cache-contracts.outputs.cache-hit != 'true' && env.BUILD_CONTRACTS == 'true'
        shell: bash
        run: |
          sudo apt-get update && sudo apt-get install -y libssl-dev pkg-config

      - name: Install Node
        if: steps.cache-contracts.outputs.cache-hit != 'true' && env.BUILD_CONTRACTS == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install Yarn
        if: steps.cache-contracts.outputs.cache-hit != 'true' && env.BUILD_CONTRACTS == 'true'
        run: npm install -g yarn

      - name: Setup rust
        if: steps.cache-contracts.outputs.cache-hit != 'true' && env.BUILD_CONTRACTS == 'true'
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: nightly-2024-08-01

      - name: Cache Rust dependencies
        if: steps.cache-contracts.outputs.cache-hit != 'true' && env.BUILD_CONTRACTS == 'true'
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ./core/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install foundry-zksync
        if: steps.cache-contracts.outputs.cache-hit != 'true' && env.BUILD_CONTRACTS == 'true'
        run: |
          mkdir ./foundry-zksync
          curl -LO https://github.com/matter-labs/foundry-zksync/releases/download/nightly-27360d4c8d12beddbb730dae07ad33a206b38f4b/foundry_nightly_linux_amd64.tar.gz
          tar zxf foundry_nightly_linux_amd64.tar.gz -C ./foundry-zksync
          chmod +x ./foundry-zksync/forge ./foundry-zksync/cast
          echo "$PWD/foundry-zksync" >> $GITHUB_PATH

      - name: Pre-download compilers
        if: steps.cache-contracts.outputs.cache-hit != 'true' && env.BUILD_CONTRACTS == 'true'
        shell: bash
        run: |
          # Download needed versions of vyper compiler
          mkdir -p ./hardhat-nodejs/compilers-v2/vyper/linux
          wget -nv -O ./hardhat-nodejs/compilers-v2/vyper/linux/0.3.10 https://github.com/vyperlang/vyper/releases/download/v0.3.10/vyper.0.3.10+commit.91361694.linux
          wget -nv -O ./hardhat-nodejs/compilers-v2/vyper/linux/0.3.3 https://github.com/vyperlang/vyper/releases/download/v0.3.3/vyper.0.3.3+commit.48e326f0.linux
          chmod +x  ./hardhat-nodejs/compilers-v2/vyper/linux/0.3.10
          chmod +x  ./hardhat-nodejs/compilers-v2/vyper/linux/0.3.3

          COMPILERS_JSON='[{"zksolc": ["1.3.14", "1.3.16", "1.3.17", "1.3.1", "1.3.7", "1.3.18", "1.3.19", "1.3.21"]}, {"zkvyper": ["1.3.13"]}]'
          echo "$COMPILERS_JSON" | jq -r '.[] | to_entries[] | .key as $compiler | .value[] | "\(.),\($compiler)"' | while IFS=, read -r version compiler; do
            mkdir -p "./hardhat-nodejs/compilers-v2/$compiler"
            wget -nv -O "./hardhat-nodejs/compilers-v2/$compiler/${compiler}-v${version}" "https://github.com/matter-labs/${compiler}-bin/releases/download/v${version}/${compiler}-linux-amd64-musl-v${version}"
            chmod +x "./hardhat-nodejs/compilers-v2/$compiler/${compiler}-v${version}"
          done

      - name: Install zkstack
        if: steps.cache-contracts.outputs.cache-hit != 'true' && env.BUILD_CONTRACTS == 'true'
        run: |
          ./zkstack_cli/zkstackup/install --path ./zkstack_cli/zkstackup/zkstackup
          zkstackup --local || true

      - name: Build contracts
        if: steps.cache-contracts.outputs.cache-hit != 'true' && env.BUILD_CONTRACTS == 'true'
        shell: bash
        run: |
          cp etc/tokens/{test,localhost}.json
          zkstack dev contracts

      - name: Upload contracts
        uses: actions/upload-artifact@v4
        with:
          name: contracts
          path: |
            ./contracts

  build-and-push:
    permissions:
      contents: read
      packages: write
    needs: prepare-contracts
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - name: Download contracts
        uses: actions/download-artifact@v4
        with:
          name: contracts
          path: |
            ./contracts

      - name: Set IMAGE_TAG
        run: |
          if [ "${{ github.event_name }}" != "workflow_dispatch" ]; then
            echo "IMAGE_TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          else
            echo "IMAGE_TAG=${{ github.event.inputs.image_tag }}" >> $GITHUB_ENV
          fi

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ env.CACHE_KEY }}
          restore-keys: |
            ${{ github.repository }}-server-v2-

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ env.IMAGE_TAG }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64
          file: docker/server-v2/Dockerfile
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          provenance: false
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
          build-args: |
            RUSTC_WRAPPER=
            CARGO_NET_GIT_FETCH_WITH_CLI=true

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache